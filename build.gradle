plugins {
    id('org.jetbrains.kotlin.jvm') version "$kotlin_version"

    // Used to check unused dependencies, run `./gradlew lintGradle` to check dependencies.
    // Be aware that automatic fixing with `fixLintGradle` might break something.
    id('nebula.lint') version "17.1.0"
}

// Do not delete, this will get updated automatically when running the version command
version '0.0.1'

group 'eu.miaplatform'
gradleLint.rules = ['all-dependency']
gradleLint.alwaysRun = false


// setup junit5 and remove all api imports of junit 4
configurations {
    implementation {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation {
        exclude group: 'junit', module: 'junit'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1-native-mt'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"

    implementation libs.bundles.impl.ktor
    testImplementation libs.bundles.testImpl.ktor
    implementation libs.bundles.impl.logback
    implementation libs.bundles.impl.jackson
    implementation libs.bundles.impl.retrofit

    testImplementation libs.bundles.testImpl.testSuite
}

test {
    useJUnitPlatform()
}

// version props

def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    doLast {
        def propsFile = file "$generatedVersionDir/version.properties"
        propsFile.parentFile.mkdirs()
        def props = new Properties()
        def projectVersion = rootProject.version.toString()
        print("Project version: ${projectVersion}")
        props.setProperty("version", projectVersion)
        propsFile.withWriter { props.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties
build.dependsOn generateVersionProperties

// jar

jar {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)

    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'eu.miaplatform.ServiceApplicationKt'
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    archiveFileName = 'application.jar'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = "11"
}
tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = "11"
    targetCompatibility = "11"
}



class UpdateVersion extends DefaultTask {
    private String tag

    @Option(option = "tag", description = "Updates the project version with specified tag (when supplying the tag do not include the initial v).")
    void setTag(String tag) {
        this.tag = tag
    }

    @Input
    String getTag() {
        return tag
    }

    @TaskAction
    void print() {
        getLogger().quiet("Updating files to version $tag")
        String oldTag = project.version

        getLogger().quiet("Updating build.gradle file, updating from version $oldTag to $tag")
        String updatedBuildGradle = project.buildFile.getText().replaceFirst("version '$oldTag'", "version '$tag'")
        project.buildFile.setText(updatedBuildGradle)

        getLogger().quiet("Updating Changelog and Dockerfile")
        runCommand("./scripts/update-changelog.sh", tag)

        getLogger().quiet("Commit and tag creation on local repository")
        String tagName = "v${tag}"
        runCommand("git", "commit", "-a", "-m", tagName)
        runCommand("git", "tag", tagName)
    }

    static String runCommand(String... commands) {
        Process process = new ProcessBuilder(commands).redirectErrorStream(true).start()
        process.waitFor()
        String result = ''
        process.inputStream.eachLine { result += it + '\n' }
        boolean error = process.exitValue() != 0
        if (error) {
            println(result)
        }
        return result
    }
}
//to execute the task: ./gradlew version --tag=[version]
task version(type: UpdateVersion)